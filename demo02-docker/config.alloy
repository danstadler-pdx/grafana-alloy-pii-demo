///////////////////////////////////////////////////////////////////////////////////
// you can use a solution like this and the next component for quick debugging.
//

// for example, you could sanity check that you are passing in env vars correctly.
// declare "debugger" {
//   argument "load_path" {
// 	comment = ""
//   }
// }
// debugger "my_debugger" {
// 	load_path = env("MASK_MODULE_PATH")
// }

///////////////////////////////////////////////////////////////////////////////////


// this configures logging of Alloy itself
logging {
  level  = "debug"
  format = "logfmt"
}

// Import our customized logs processor module...
import.file "logs_module" {
  filename = env("PROJECT_MODULE_PATH")
}
// ...then configure it
logs_module.my_log_processor "default" {
  targets = [{__path__ = "/tmp/alloy-logs/*.log"}]
  forward_to = [mask_module.mask_credit_card.mask_cc.receiver]
}

/*
Note: "logs_module.my_log_processor" is a very simplified version of:
https://github.com/grafana/alloy-modules/blob/main/modules/kubernetes/core/logs.alloy

The goal of this part of the demo is to start introducing you to how things will look 
in a more "real" K8s environment. The file linked above shows how we an Alloy module
would be used in such an environment.

In this simplified version, the components have comments that discuss what our module 
is doing, and then points you to the specific part of the Alloy Module file linked above, 
so you can see the more complex example.
*/


// Import the Masking module...
// https://github.com/grafana/alloy-modules/blob/main/modules/kubernetes/annotations/logs/mask.alloy
import.file "mask_module" {
  filename = env("MASK_MODULE_PATH")
}
// ...then configure the masking chain
mask_module.mask_credit_card "mask_cc" {
  forward_to = [mask_module.mask_email.mask_em.receiver]
}
mask_module.mask_email "mask_em" {
  forward_to = [mask_module.mask_ipv4.mask_i4.receiver]
}
mask_module.mask_ipv4 "mask_i4" {
  forward_to = [mask_module.mask_ipv6.mask_i6.receiver]
}
mask_module.mask_ipv6 "mask_i6" {
  forward_to = [mask_module.mask_phone.mask_ph.receiver]
}
mask_module.mask_phone "mask_ph" {
  forward_to = [mask_module.mask_ssn.mask_sn.receiver]
}
mask_module.mask_ssn "mask_sn" {
  forward_to = [loki.write.default.receiver]		// note the forward here
}

// final step - write to cloud logs
loki.write "default" {
  endpoint {
	url = env("LOKI_URL")
	basic_auth {
    	username = env("MY_CLOUD_LOGS_TENANT_ID")
    	password = env("MY_CLOUD_LOGS_WRITE_TOKEN")
    }
  }
}